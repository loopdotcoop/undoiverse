const FILE = 'test.js'
    , VERSION = '0.2.0'

      //// Configuration, passed to every test-file.
    , config = {}

      //// Files for `test-runner.js` to test.
    , testFiles = [
          require('./tests/core/client/client.test.js')(config)
        , require('./tests/core/entity/entity.test.js')(config)
        , require('./tests/core/location/location.test.js')(config)
        , require('./tests/uu/uu.test.js')(config)
      ]

      //// ANSI Colours.
    , RED = '\033[1;31m'
    , BOLD = '\033[1m'
    , END = '\033[0m'
    , HR = (new Array(81)).join('-')

      //// Add a handy `append()` method to the results-array.
    , results = ((a)=>{a.append=(x)=>{a[a.length-1]+=x};return a})([HR])

      //// Node.js built-in modules.
    , a = require('assert')
    , util = require('util')
    , utilConfig = { // https://goo.gl/EZajYb
        colors: true,
        breakLength: Infinity, // format on a single line
      }
;
let i, j, tests, test, passes, fails, totalPasses = 0, totalFails = 0;


//// Add a heading for each test-file.
for (i=0; tests=testFiles[i]; i++) {
  passes = fails = 0;
  results.push(`${BOLD}${tests.FILE}${END}  ${tests.VERSION}  ${tests.PLUGIN}`);

  //// Run each test in the current test-file.
  for (j=0; test=tests[j]; j++) {
    try {
      test(tests.mock);
      totalPasses++; // did not throw an exception
      passes++;

    //// Encountered an exception, which may be...
    } catch (e) {
      results.push(`  Line ${stackToLineNo(tests.FILE, e.stack)}`);
      totalFails++;
      fails++;

      //// ...generated by one of Node’s `assert` methods as expected...
      if (e instanceof a.AssertionError) {
        results.push(`    ${j+1}. ${e.message}`);
        if (null != e.actual && null != e.expected) results.push(
          `    actual   ${util.inspect(e.actual, utilConfig)}`,
          `    expected ${util.inspect(e.expected, utilConfig)}`);

      //// ...or generated by whatever the test is testing.
      } else {
        results.push(`    ${j+1}. Unexpected ${e.name}:`);
        results.push(`      ${RED}${e.message.split('\n').join('\n  ')}${END}`);
      }

    }
  }

  //// Add a summary for each test-file.
  results.push(`  Passes ${passes}`);
  if (fails) results.append(`  ${RED}Fails ${fails}${END}`);
}

//// Add a summary at the end of all the tests.
results.push(HR,`${BOLD}Total Passes ${totalPasses}${END}`);
if (totalFails) results.append(`  ${RED}Total Fails ${totalFails}${END}`);
results.push(HR,'');

//// Output all test results, and `0` status for success or `1` for failure.
process.stdout.write( results.join('\n') );
process.exit(totalFails ? 1 : 0); // in bash, use `$ echo $?` to see this




//// PRIVATE HELPER FUNCTIONS

//// `stackToLineNo('foo/bar.test.js', '... Node’s error.stack output ...')`
//// Finds the proper test-file line number from a Node.js stack-trace.
function stackToLineNo (path, stack) {
  let i, stackLine, lineMatch, stackLines = stack.split('\n');
  let lineRx = new RegExp(`${tests.FILE}:(\\d+):\\d+\\)$`);
  for (i=0; stackLine=stackLines[i]; i++) {
    lineMatch = stackLine.match(lineRx);
    if (lineMatch) { return lineMatch[1]; }
  }
  return '?'; // not found
}
